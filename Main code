import numpy as np

class StressAnalyzer:
    def __init__(self, voice_analyzer):
        self.voice_analyzer = voice_analyzer
        
    def analyze_stress_levels(self, current_features):
        if self.voice_analyzer.baseline_features is None:
            raise ValueError("Baseline features not set")
            
        baseline = self.voice_analyzer.baseline_features
        
        pitch_variation = np.mean(np.abs(current_features['pitch'] - baseline['pitch']))
        energy_ratio = current_features['energy'] / baseline['energy']
        mfcc_difference = np.mean(np.abs(current_features['mfccs'] - baseline['mfccs']))
        tempo_change = abs(current_features['tempo'] - baseline['tempo']) / baseline['tempo']
        
        stress_score = (
            pitch_variation * 0.3 +
            energy_ratio * 0.3 +
            mfcc_difference * 0.2 +
            tempo_change * 0.2
        )
        
        normalized_score = min(max(stress_score, 0), 1)
        
        return {
            'stress_score': normalized_score,
            'pitch_variation': pitch_variation,
            'energy_change': energy_ratio,
            'rhythm_change': tempo_change
        }
